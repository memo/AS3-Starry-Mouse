/***********************************************************************GENERIC 3D SPRITE NODE CLASSRenders as a 3D sprite and has basic physical properties like velocity, momentum etc.v0.4.0TODO:add camera functionilty instead of fixed projection-----------------------------------Copyright (c) 2008, Memo Akten, www.memo.tvThis program is free software: you can redistribute it and/or modifyit under the terms of the GNU General Public License as published bythe Free Software Foundation, either version 3 of the License, or(at your option) any later version.This program is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See theGNU General Public License for more details.You should have received a copy of the GNU General Public Licensealong with this program.  If not, see <http://www.gnu.org/licenses/>.	***********************************************************************/	package msa.sprite3d {	import flash.display.Sprite;	import flash.geom.Point;	import flash.geom.ColorTransform;		public class Node3D extends Sprite {		public var pos:Vector3D;			// contains x,y,z position		public var vel:Vector3D;			// contains velocity vector		public var size:Point;				// the x and y size of the object		public var oldPos:Vector3D;			// the old position		public var drag:Number;				// a kind of fake/simplified friction		public var vr:Number;				// rotational velocity						static var MAX_Z:Number = 400;		// distance of camera to the front plane, decreasing this increases the FOV. Increasing it decreases the FOV.				private var invZ:Number;			// used for internal calculations				public function Node3D(tx:Number = 0, ty:Number = 0, tz:Number = 0) {			size = new Point(1, 1);			pos = new Vector3D(tx, ty, tz);			vel = new Vector3D(0, 0, 0);		}				public function setPosition(tx:Number = 0, ty:Number = 0, tz:Number = 0) {			pos.set(tx, ty, tz);		}				public function updateAndRender() {		// transforms the 3D position/scale etc. to 2D stage coordinates 			update();							oldPos = pos.clone();				// copy position to old position						pos = Vector3D.add(pos, vel);		// add velocity to position						if(stage && pos.z > -MAX_Z) {				// if the sprite is beyong the front clipping plane and should be rendered;							invZ = MAX_Z/(MAX_Z + pos.z);		// calculate transformation amount								var ct:ColorTransform = transform.colorTransform;					ct.redMultiplier = ct.greenMultiplier = ct.blueMultiplier = invZ;		// applies black fog, can be changed to any ColorTransform				transform.colorTransform = ct;										var cx = stage.stageWidth/2;				var cy = stage.stageHeight/2;				x = (pos.x - cx) * invZ + cx;				// transform 3D coordinates to 2D				y = (pos.y - cy) * invZ + cy;								scaleX = size.x * invZ;						// calculate size based on distance				scaleY = size.y * invZ;				rotation += vr;							}				// else visible = false					// front clipping (I want objects in front of the front clipping plane to 'stick' to the camera so commented out this line		}						public function update() {}						// this will be overridden, should be a pure virtual function if flash supported it!			}}