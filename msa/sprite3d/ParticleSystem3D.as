/***********************************************************************3D PARTICLE SYSTEM CLASSManages emitter, and all particlesv0.4.0-----------------------------------Copyright (c) 2008, Memo Akten, www.memo.tvThis program is free software: you can redistribute it and/or modifyit under the terms of the GNU General Public License as published bythe Free Software Foundation, either version 3 of the License, or(at your option) any later version.This program is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See theGNU General Public License for more details.You should have received a copy of the GNU General Public Licensealong with this program.  If not, see <http://www.gnu.org/licenses/>.	***********************************************************************/	package msa.sprite3d {	import flash.geom.*;	import flash.display.*;	import flash.events.*;	import flash.utils.*;	public class ParticleSystem3D extends Sprite {		//emission properties: (should group these into an object, would allow flexibility in the future for more generic particle system)		internal var gravity:Number			= 0.0;		// how much gravity there is 		internal var fadeSpeed:Number		= 0.95;		// speed at which particles fade out		internal var fadeStartTime:int		= 1000;		// milliseconds after which particles start fading out		internal var growSpeed:Number		= 0.02;		// speed at which particles grow		internal var emitSpeed:Number		= 5.0;		// max speed particles have when emitted		internal var inheritSpeed:Number	= 0.6;		// how much of the emitters speed does the particle inherit		internal var minSize:Number			= 0.02;		// minimum size of the particle		internal var maxSize:Number			= 0.4;		// maximum size of the particle		internal var maxRotSpeed:Number		= 10;		// maximum rotational speed						internal var inheritVel:Vector3D;				// the actual velocity vector each particle will inherit (updated each frame by the particle system)		internal var nowTime:int;						// milliseconds since app has been run		internal var graphicClass:Class;				private var _emitTimer:Timer;					// Timer instance to handle when to emit new particles		private var _emitter:Emitter3D;					// handle to an emitter object				public function ParticleSystem3D(freq:Number, graphicClass:Class) {			this.graphicClass = graphicClass;			_emitter = new Emitter3D(this, graphicClass);			addChild(_emitter);			_emitter.setPosition((Math.random()-0.5) * 1000, (Math.random()-0.5) * 1000, (Math.random()-0.5) * 1000);						setFreq(freq);			inheritVel = new Vector3D();			addEventListener(Event.ENTER_FRAME, update);		}		public function setFreq(freq:Number) {			_emitTimer = new Timer(1000/freq);			_emitTimer.addEventListener(TimerEvent.TIMER, emit);			startEmitter();		}				private function emit(e:TimerEvent) {			addChild( new Particle3D(this, graphicClass, _emitter.pos.x, _emitter.pos.y, _emitter.pos.z) );		}		public function startEmitter() {			_emitTimer.start();		}				public function stopEmitter() {			_emitTimer.stop();		}				private function update(e:Event) {			nowTime = getTimer();									// get the current time			inheritVel = Vector3D.mult(_emitter.vel, inheritSpeed);	// calculate velocity inheritance vector			for (var i:uint=0; i < numChildren; i++)				// loop through all children of the ParticleSystem (all particles and the _emitter object				(getChildAt(i) as Node3D).updateAndRender();			// call its updateAndRender function		}			}}