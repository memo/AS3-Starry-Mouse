/***********************************************************************SPRINGY 3D PARTICLE EMITTER CLASSv0.4.0TODO:create superclass for emitters so different behaviours can be added quite easily-----------------------------------Copyright (c) 2008, Memo Akten, www.memo.tvThis program is free software: you can redistribute it and/or modifyit under the terms of the GNU General Public License as published bythe Free Software Foundation, either version 3 of the License, or(at your option) any later version.This program is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See theGNU General Public License for more details.You should have received a copy of the GNU General Public Licensealong with this program.  If not, see <http://www.gnu.org/licenses/>.	***********************************************************************/	package msa.sprite3d {	public class Emitter3D extends SpringyNode3D {		private var _pSystem:ParticleSystem3D;		private var _circleFreq:Number= 0.002;		private var _circleRadius:Number= 200;		public function Emitter3D(_pSystem:ParticleSystem3D, graphicClass:Class) {			this._pSystem = _pSystem;			addChild( new graphicClass ); 		// add the relevant graphic from the library		}						override public function update() {			var sx:Number = Math.cos(_pSystem.nowTime * _circleFreq);			var sy:Number = Math.sin(_pSystem.nowTime * _circleFreq);			var rad:Number = Math.sin(_pSystem.nowTime * _circleFreq * 0.2);			setTarget3(_pSystem.mouseX + (Math.random() - 0.5) * 200, _pSystem.mouseY + (Math.random() - 0.5) * 200,  0 + (Math.random() - 0.5) * 200);			target.x += sx * _circleRadius * rad;			target.z += sy * _circleRadius * rad;			vel.z += (Math.random()-0.5) * (vel.x*vel.x + vel.y*vel.y) * 0.01;			super.update(); // call the update function of the super class (SpringyNode3D) to do all spring functions		}	}}